package com.aliyun.odps.web3.mr.decode;

import com.aliyun.odps.web3.common.ContractUtils;
import com.aliyun.odps.web3.common.TypeConvertUtils;
import org.junit.Test;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.datatypes.Type;
import org.web3j.utils.Numeric;

import java.util.List;

/**
 *
 * @Author: smy
 * @Date: 2023/3/15 10:45 PM
 */
public class OpenSeaContractTest {


    @Test
    public void atomicMatchEvent() {
        System.out.println(EventEncoder.buildEventSignature("atomicMatch_(address[14],uint256[18],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes,uint8[2],bytes32[5])").substring(0, 10));
        String inputData = "0xab834bab0000000000000000000000007be8076f4ea4a4ad08075c2508e481d6c946d12b000000000000000000000000cef0633dc36e6b539ff42b21ab9ab1a3ca9acfe3000000000000000000000000173309061808168ab41179bf117d3dfd59c527e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db3b2e1f699caf230ee75bfbe7d97d70f81bc945000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007be8076f4ea4a4ad08075c2508e481d6c946d12b000000000000000000000000173309061808168ab41179bf117d3dfd59c527e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000db3b2e1f699caf230ee75bfbe7d97d70f81bc9450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000186cc6acd4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061a9d67e000000000000000000000000000000000000000000000000000000000000000022269f0ddf91d26ef9af91046521e7a33b280450e6adaf47d445ad971c93624900000000000000000000000000000000000000000000000000000000000002ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000186cc6acd4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061a9818000000000000000000000000000000000000000000000000000000000629964ce8e89508b03903c1fcc88e267879785b8fe5a749bc8afe71fd22590ecaaba7fcda0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000009200000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c6aaa783a6cda194bf0a787d7e103904a6d05f06cc6be57d79886382f1a23e53b69ad6242492517ff3f78aa897ab3e4586aa63b978bd5532012223893e6a3a1b26aaa783a6cda194bf0a787d7e103904a6d05f06cc6be57d79886382f1a23e53b69ad6242492517ff3f78aa897ab3e4586aa63b978bd5532012223893e6a3a1b20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cef0633dc36e6b539ff42b21ab9ab1a3ca9acfe3000000000000000000000000000000000000000000000000000000000000115d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd000000000000000000000000173309061808168ab41179bf117d3dfd59c527e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        List<Type> result = ContractUtils.decodeInputData(inputData, "atomicMatch_(address[14],uint256[18],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes,uint8[2],bytes32[5])");
        TypeConvertUtils.convert2String(result).forEach(d -> System.out.println(d));
    }

    @Test
    public void staticCall4Single() {
        // all ERC721 contract addresses
        System.out.println(EventEncoder.buildEventSignature("transferFrom(address,address,uint256)").substring(0, 10));
        //unit: token id
        System.out.println(Numeric.toBigInt("0x00000000000000000000000000000000000000000000000000000000000075a1"));
    }

    @Test
    public void staticCall4Batch() {
        // all ERC721 contract addresses
        System.out.println(EventEncoder.buildEventSignature("transferFrom(address,address,uint256)").substring(0, 10));

        // wyvernAtomicizer contract address(for batch): 0xc99f70bfd82fb7c8f8191fdfbfb735606b15e5c5
        System.out.println(EventEncoder.buildEventSignature("atomicize(address[],uint256[],uint256[],bytes)").substring(0,10));
        String sellCallData = "0x68f0bcaa000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000f06059f01f6f08a603c939359a0a1186f7687685000000000000000000000000000000000000000000000000000000000000000aae823b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000758023b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000758123b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee00000000000000000000000000000000000000000000000000000000000075a123b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee00000000000000000000000000000000000000000000000000000000000076fe23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000770123b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000770323b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000770623b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000770823b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee000000000000000000000000000000000000000000000000000000000000780123b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e238204fea0d297d6e4557c673d68f21c6e7ee0000000000000000000000000000000000000000000000000000000000007813000000000000000000000000000000000000000000000000";
        List<Type> result1 = ContractUtils.decodeInputData(sellCallData, "atomicize(address[],uint[],uint[],bytes)");
        TypeConvertUtils.convert2String(result1).forEach(d -> System.out.println(d));
    }

    @Test
    public void proxyCallMethodId() {
        System.out.println(EventEncoder.buildEventSignature("atomicMatch_(address[14],uint256[18],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes,uint8[2],bytes32[5])").substring(0, 10));
        System.out.println(EventEncoder.buildEventSignature("transferFrom(address,address,uint256)").substring(0, 10));
        System.out.println(EventEncoder.buildEventSignature("matchERC1155UsingCriteria(address,address,address,uint256,uint256,bytes32,bytes32[])").substring(0, 10));
        System.out.println(EventEncoder.buildEventSignature("matchERC721UsingCriteria(address,address,address,uint256,bytes32,bytes32[])").substring(0, 10));
        System.out.println(EventEncoder.buildEventSignature("matchERC721WithSafeTransferUsingCriteria(address,address,address,uint256,bytes32,bytes32[])").substring(0, 10));

    }

}
